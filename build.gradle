plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
    withJavadocJar()
}

group = 'net.javasauce'

var buildNumber = System.getenv("BUILD_NUMBER")
version = '0.1'
if (buildNumber != null) {
    version = "$version.$buildNumber"
} else {
    version = "$version-SNAPSHOT"
}

base {
    archivesName = 'CompilerServer'
}

repositories {
    mavenCentral()
}

dependencies {
    api 'org.slf4j:slf4j-api:1.7.30'

    compileOnly 'org.jetbrains:annotations:26.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

tasks.register('signJar') {
    dependsOn('jar')

    doFirst {
        def args = [:]
        args['jar'] = jar.archiveFile.get().asFile
        if (System.getenv("KEY_STORE")) {
            args['keyStore'] = System.getenv("KEY_STORE")
            file(System.getenv("KEY_STORE_PROPS")).withReader {
                def props = new Properties()
                props.load(it)
                args.putAll(props)
            }
        } else if (System.getenv("KEY_STORE_FILE")) {
            def tempFile = File.createTempFile("jks", "jks")
            tempFile.bytes = System.getenv("KEY_STORE_FILE").decodeBase64()
            args['keyStore'] = tempFile
            def props = new Properties()
            props.load(new java.io.ByteArrayInputStream(System.getenv("KEY_STORE_PROPS_FILE").decodeBase64()))
            args.putAll(props)
        } else if (project.hasProperty('keyStore')) {
            args['keyStore'] = project.getProperty('keyStore')
            args['alias'] = project.getProperty('keyStoreAlias')
            args['storePass'] = project.getProperty('keyStorePass')
            args['keyPass'] = project.getProperty('keyStoreKeyPass')
        } else {
            println "No signing properties."
            state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
            didWork = false
            return
        }
        project.ant.invokeMethod('signjar', args)
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        CompilerServer(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version

            from components['java']

            pom {
                name = base.archivesName.get()
                description = base.archivesName.get()
                url = "https://github.com/JavaSauce/${base.archivesName.get()}"
                scm {
                    url = "https://github.com/JavaSauce/${base.archivesName.get()}"
                    connection = "scm:git:git://github.com/JavaSauce/${base.archivesName.get()}.git"
                    connection = "scm:git:git@github.com:JavaSauce/${base.archivesName.get()}.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/JavaSauce/${base.archivesName.get()}/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/JavaSauce/${base.archivesName.get()}/main/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (System.getenv("GPG_PRIVATE_KEY_FILE")) {
        useInMemoryPgpKeys(
                new String(System.getenv('GPG_PRIVATE_KEY_FILE').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8),
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.CompilerServer
}
